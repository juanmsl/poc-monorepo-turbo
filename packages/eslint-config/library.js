const { resolve } = require('node:path');

const project = resolve(process.cwd(), 'tsconfig.json');

/** @type {import("eslint").Linter.Config} */
module.exports = {
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:@typescript-eslint/eslint-recommended',
    'plugin:prettier/recommended',
    'prettier',
  ],
  plugins: ['@typescript-eslint', 'import', 'prefer-arrow', 'prettier', 'eslint-plugin-prettier',],
  env: {
    browser: true,
    es6: true,
    node: true,
  },
  settings: {
    'import/resolver': {
      typescript: {
        project,
      },
    },
  },
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 'latest',
    sourceType: 'module',
  },
  ignorePatterns: ['dist', '!**/*', '**/node_modules/**', '*.d.ts'],
  rules: {
    '@typescript-eslint/array-type': ['error', { default: 'generic' }],
    '@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_', varsIgnorePattern: '^_' }],
    '@typescript-eslint/no-explicit-any': ['error'],
    '@typescript-eslint/ban-types': ['off'],
    'array-callback-return': 'error',
    eqeqeq: ['error', 'always'],
    'guard-for-in': 'warn',
    'import/no-default-export': 'off',
    'import/no-named-as-default': 'error',
    'import/no-named-default': 'error',
    'import/no-namespace': 'error',
    'import/no-self-import': 'error',
    'import/export': 'error',
    'import/exports-last': 'off',
    'import/first': 'error',
    'import/group-exports': 'off',
    'import/newline-after-import': 'error',
    'import/no-absolute-path': 'error',
    'import/no-cycle': ['error', { ignoreExternal: true }],
    'import/no-deprecated': 'error',
    'import/no-extraneous-dependencies': ['error', { optionalDependencies: false }],
    'import/no-useless-path-segments': ['error', { noUselessIndex: true }],
    'import/no-webpack-loader-syntax': 'error',
    'import/prefer-default-export': 'off',
    'import/order': [
      'error',
      {
        'newlines-between': 'always',
        warnOnUnassignedImports: true,
        groups: ['builtin', 'external', 'parent', 'sibling', 'internal', 'index', 'object', 'type', 'unknown'],
        pathGroups: [
          {
            pattern: 'react',
            group: 'external',
            position: 'before',
          },
        ],
        alphabetize: {
          order: 'asc',
          caseInsensitive: false,
        },
      },
    ],
    'line-comment-position': ['error', 'above'],
    'multiline-comment-style': ['error', 'starred-block'],
    'no-confusing-arrow': 'off',
    'no-console': 'warn',
    'no-duplicate-imports': 'error',
    'no-empty': ['error', { allowEmptyCatch: true }],
    'no-implicit-globals': 'error',
    'no-invalid-this': 'error',
    'no-lone-blocks': 'error',
    'no-loop-func': 'error',
    'no-new': 'error',
    'no-promise-executor-return': 'error',
    'no-prototype-builtins': 'warn',
    'no-return-assign': 'error',
    'no-return-await': 'error',
    'no-template-curly-in-string': 'error',
    'no-throw-literal': 'error',
    'no-unreachable-loop': 'error',
    'no-unused-vars': 'off',
    'padding-line-between-statements': [
      'error',
      { blankLine: 'always', prev: '*', next: 'return' },
      { blankLine: 'always', prev: '*', next: 'continue' },
      { blankLine: 'always', prev: '*', next: 'break' },
      { blankLine: 'always', prev: '*', next: 'if' },
      { blankLine: 'always', prev: 'if', next: '*' },
      { blankLine: 'always', prev: 'while', next: '*' },
      { blankLine: 'always', prev: '*', next: 'while' },
      { blankLine: 'always', prev: 'switch', next: '*' },
      { blankLine: 'always', prev: '*', next: 'switch' },
      { blankLine: 'always', prev: 'for', next: '*' },
      { blankLine: 'always', prev: '*', next: 'for' },
    ],
    'prefer-arrow-callback': ['error'],
    'prefer-arrow/prefer-arrow-functions': 'off',
    'prettier/prettier': [
      'error',
      {
        printWidth: 120,
        singleQuote: true,
        useTabs: false,
        tabWidth: 2,
        semi: true,
        arrowParens: 'avoid',
        trailingComma: 'all',
        jsxSingleQuote: true,
      },
    ],
    quotes: ['error', 'single'],
    semi: 'error',
    yoda: 'error',
  },
};
